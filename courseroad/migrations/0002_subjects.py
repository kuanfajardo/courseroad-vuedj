# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-11-08 04:38
from __future__ import unicode_literals

from django.db import migrations
import requests
import json


class Migration(migrations.Migration):

    def load_subjects(apps, schema_editor):
        Subject = apps.get_model("courseroad", "Subject")

        all_depts = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "14", "15", "16", "17", "18", "20",
             "21", "21L", "21A", "21G", "21M", "21W", "21H", "22", "24", "MAS", "CMS", "STS", "WGS", "CSB", "HST", "IDS", "SCM",
                     "AS", "EC", "EM", "MS", "NS", "CC", "ESD", "ES", "SP", ]

        base_url = "https://mit-public.cloudhub.io/coursecatalog/v2/terms/2017FA/subjects"

        for dept in all_depts:
            url = base_url + "?dept=" + dept

            headers = {
                "client_id": "897b5d76f69a469cb8138a8300964211",
                "client_secret": "5fee674bAd0A4b228585Bb1870c4E062",
                "Accept": "application/json"
            }

            r = requests.get(url, headers=headers)

            try:
                json_obj = r.json()
                subjects = json_obj['items']
            except:
                print("ERROR importing " + dept)
                continue

            for subject in subjects:
                try:
                    cluster = subject['cluster']
                    if cluster is None:
                        cluster = ''

                    description = subject['description']
                    if description is None:
                        description = 'No Description'

                    instructors = subject['instructors']
                    if instructors is None:
                        instructors = 'No Instructors'

                    prerequisites = subject['prerequisites']
                    if prerequisites is None:
                        prerequisites = ''

                    prerequisites = process_prereqs(prerequisites)

                    obj = Subject(termCode=subject['termCode'],
                                  subjectId=subject['subjectId'],
                                  academicYear=subject['academicYear'],
                                  title=subject['title'],
                                  cluster=cluster,
                                  prerequisites=prerequisites,
                                  units=subject['units'],
                                  description=description,
                                  instructors=instructors)

                    obj.save()

                except Exception as e:
                    print("ERROR importing " + subject)
                    raise e

    def remove_subjects(apps, schema_editor):
        Subject = apps.get_model("courseroad", "Subject")
        Subject.objects.all().delete()

    dependencies = [
        ('courseroad', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_subjects, remove_subjects)
    ]



def process_prereqs(pre_reqs):
        """

        :param pre_reqs:
        :return:
        """

        arr = pre_reqs.split("<I>Coreq: ")

        pre = arr[0]
        co = arr[1] if len(arr) == 2 else None

        if co is not None:
            co = co.replace("</I>", "")

        p_clause, permission_override = process_clause(pre)
        c_clause, _ = process_clause(co)

        obj = {
            "permissionOverride": permission_override,
            "pre": p_clause,
            "co": c_clause
        }

        return json.dumps(obj)


def process_clause(cls):
        if cls is None:
            return ([], False)

        if cls == "":
            return ([], False)

        arr = cls.split(";")
        arr = list(filter(lambda x: x.strip() != "", arr))

        clause = []
        for series in arr:
            series_arr = series.split(',')
            series_arr = list(map(lambda x: x.strip(), series_arr))

            series_type = "or" if "or" in series_arr[-1] else "and"

            if series_type == "or":
                last = series_arr.pop()
                last_arr = last.split("or ")

                last_arr = list(filter(lambda x: x.strip() != "", last_arr))
                series_arr += last_arr

            series_arr = list(map(lambda x: x.strip(), series_arr))

            clause.append(
                {
                    "type": series_type,
                    "arr": series_arr
                }
            )

        permission_override = clause[-1] == {"type": "or", "arr": ["permission of instructor"]}

        return (clause, permission_override)
